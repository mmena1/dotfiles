#!/usr/bin/env bash

# Bootstraps OS and configures asdf, tmux and shell
# Loosely based on: https://github.com/denysdovhan/dotfiles/blob/master/scripts/bootstrap

set -e
trap on_error SIGTERM

source ./scripts/lib/echoes.sh
source ./scripts/lib/utils.sh

bootstrap_os() {
  if [ "$(uname)" = "Darwin" ]; then
      error "OS X is not supported yet :("
      exit 1
  elif [ "$(uname)" = "Linux" ]; then
    if [ "$(cat /etc/*-release | grep manjaro) > /dev/null 2>&1" ]; then
      bot "You are currently running Manjaro Linux."
      echo
      read -p "Do you want to proceed with Manjaro setup? [y/N] " -n 1 answer
      echo
     if [[ ! $answer =~ (yes|y|Y) ]];then
        exit 1
      fi
      source  ./scripts/setup/manjaro.sh
    elif [ "$(cat /etc/*-release | grep arch)" ]; then
      bot "You are currently running an Arch based Linux."
      echo
      read -p "Do you want to proceed with Arch setup? [y/N] " -n 1 answer
      echo
     if [[ ! $answer =~ (yes|y|Y) ]];then
        exit 1
      fi
      source  ./scripts/setup/arch.sh
    else
      error "This linux distro is not supported yet :("
      exit 1
    fi
  fi
}

configure_tmux() {
  bot "Configuring tmux"
  echo
  read -p "Would you like to install the awesome tmux configuration from https://github.com/gpakosz/.tmux.git? (I recommend it) [y/N]" -n 1 answer
  echo
    if [[ $answer =~ (yes|y|Y) ]];then
      action "git clone https://github.com/gpakosz/.tmux.git ~"
      git clone https://github.com/gpakosz/.tmux.git ~
      ok
      action "ln -s -f ~/.tmux/.tmux.conf ~/.tmux.conf"
      ln -s -f ~/.tmux/.tmux.conf ~/.tmux.conf
      ok
    else
      ok "Skipping"
    fi
}

configure_asdf() {
  if _exists asdf; then
    bot "asdf binary detected"
    echo
    read -p "Would you like to install the languages defined in .tool-versions? [y/N]" -n 1 answer
    echo
    if [[ $answer =~ (yes|y|Y) ]];then
      if cat ~/.tool-versions > /dev/null 2>&1 ;then
        while read -r line; do
          # get the first word of the line
          language=`echo $line | head -n1 | awk '{print $1;}'`
          running "$language"
          # is language already installed?
          if ! asdf where $language > /dev/null 2>&1 ;then
            # does the plugin exist in the remote repos?
            if asdf plugin list all | grep -E "^$language\s" > /dev/null 2>&1 ;then
              # is the plugin not installed already?
              if ! asdf plugin list | grep "$language" > /dev/null 2>&1 ;then
                action "asdf plugin-add $language"
                asdf plugin-add $language
              fi
              action "asdf list-all $language"
              asdf list-all $language
              action "asdf install $language"
              asdf install $language
            else
              error "Plugin $language does not exist."
            fi
          else
            echo "$language already installed."
          fi
          ok

        done < ~/.tool-versions
      else
        error "~/.tool-versions not found. Skipping..."
      fi
    else
      ok "Skipping"
    fi
  fi
}

configure_docker() {
  bot "Setting docker"
  echo
  read -p "Enable docker and add your user to the docker group? [y/N]" -n 1 answer
  echo
  if [[ $answer =~ (yes|y|Y) ]];then
    if [ ! systemctl is-enabled docker > /dev/null 2>&1 ];then
      action "Enabling docker"
      sudo systemctl enable --now docker.service
      ln -s /var/lib/snapd/snap /snap
      ok
    fi
    if [ ! groups | grep docker /dev/null 2>&1 ]; then
      action "Adding user to the docker group"
      sudo gpasswd -a $LOGNAME docker
      ok
    else
      ok "User is already a member of the docker group"
    fi
  else
    ok "Skipping"
  fi
}

set_shell() {
  bot "Setting fish as the default shell"
  read -p "If fish binary is not detected, it will fall back to zsh. Continue? [y/N]" -n 1 answer
  echo
  if [[ $answer =~ (yes|y|Y) ]];then
    if command -v fish > /dev/null ; then
      action "Setting fish as default"
      chsh -s "$(command -v fish)" && ok || error "Cannot set Fish as default shell!"
    else
      warn "Fish binary not detected, falling back to zsh..."
      if command -v zsh > /dev/null ; then
        action "Setting zsh as default"
        chsh -s "$(command -v zsh)" && ok || error "Cannot set Zsh as default shell!"
      else
        warn "Zsh binary not detected, skipping..."
      fi
    fi
  fi
}

on_finish() {
  bot "Setup was successfully done!"
  echo "Happy Coding!"

  source ./bin/nyan

  bot "P.S: Don't forget to restart the terminal :)"
  echo
}

on_error() {
  error "Unexpected exception!"
  error "Please manually review and test each function to find why :("
  error "Or you can raise an issue on the repo and I will take a look when I can :)"
  exit 1
}

main() {
  bootstrap_os "$*"
  configure_tmux "$*"
  configure_asdf "$*"
  configure_docker "$*"
  set_shell "$*"
  on_finish "$*"
}

main "$*"
