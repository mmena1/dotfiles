# Task modules for common installation functions
# This template provides modular installation functions

# System package installation module
package_module() {
  # Check for install candidate using apt-cache policy
  aptCacheExists() {
    apt-cache policy "$1" | grep -q 'Candidate:'
  }
  # Install packages based on OS
  install_packages() {
    {{ if eq .osid "darwin" -}}
    install_macos_packages
    {{ else if eq .osid "linux-debian" -}}
    install_debian_packages
    {{ else -}}
    error "Unsupported OS for package installation"
    return 1
    {{ end -}}
    return 0
  }
  
  # Install macOS packages with Homebrew
  install_macos_packages() {
    action "Installing macOS packages with Homebrew"
    if ! _exists brew; then
      error "Homebrew not installed"
      return 1
    fi

    {{ $allPackages := concat .packages.common .packages.darwin.brews | uniq -}}
    
    # Generate Brewfile
    cat > Brewfile <<EOF
# Generated by Chezmoi - DO NOT EDIT DIRECTLY

{{ if .packages.darwin.taps -}}
# Taps
{{ range .packages.darwin.taps -}}
tap {{ . }}
{{ end }}
{{ end -}}

# Formulae
{{ range $allPackages -}}
brew "{{ . }}"
{{ end -}}

{{ if .packages.darwin.casks -}}
# Casks
{{ range .packages.darwin.casks -}}
cask "{{ . }}"
{{ end }}
{{ end -}}
EOF

    # Install using Brewfile
    running "Installing via Brewfile"
    brew bundle install --no-lock || warn "Brewfile installation failed"
    
    return 0
  }
  
  # Install Debian packages with apt
  install_debian_packages() {
    action "Installing Debian packages with apt"
    
    {{ $allPackages := concat .packages.common .packages.debian.apt | uniq -}}
    {{- /* Manually build a space-separated string */ -}}
    {{ $packagesStr := "" -}}
    {{ range $allPackages -}}
      {{ $packagesStr = printf "%s %s" $packagesStr (toString .) -}}
    {{ end -}}
    {{ $packagesStr = trim $packagesStr -}}
    
    # Convert package string to array
    local all_pkgs=( {{ $packagesStr }} )
    local valid_pkgs=()
    local invalid_pkgs=()

    # Validate packages
    for pkg in "${all_pkgs[@]}"; do
      if aptCacheExists "$pkg"; then
        valid_pkgs+=("$pkg")
      else
        invalid_pkgs+=("$pkg")
      fi
    done

    # Handle invalid packages
    if [ ${#invalid_pkgs[@]} -gt 0 ]; then
      warn "Skipping invalid/unavailable packages:"
      printf "  - %s\n" "${invalid_pkgs[@]}"
    fi

    # Exit early if no valid packages
    if [ ${#valid_pkgs[@]} -eq 0 ]; then
      warn "No valid packages to install"
      return 0
    fi

    # Proceed with installation
    running "Updating package lists"
    sudo apt-get update -qy || { error "Failed to update packages"; return 1; }

    running "Installing packages (${#valid_pkgs[@]} total)"
    sudo apt-get install -qy --no-install-recommends "${valid_pkgs[@]}" || {
      warn "Bulk install failed - retrying individually"
      
      # Individual installation fallback
      for pkg in "${valid_pkgs[@]}"; do
        running "Installing $pkg"
        sudo apt-get install -qy --no-install-recommends "$pkg" || \
          error "Critical failure: $pkg"
      done
    }

    return 0
  }
}

# ASDF module
asdf_module() {
  # Install ASDF version manager
  install_asdf() {
    if ! _exists asdf; then
      action "Installing ASDF version manager"
      if [[ ! -d ~/.asdf ]]; then
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf || return 1
        source ~/.asdf/asdf.sh
      else
        ok "ASDF directory already exists"
        source ~/.asdf/asdf.sh
      fi
    else
      ok "ASDF already installed"
    fi
    return 0
  }
  
  # Install tools defined in .tool-versions
  install_asdf_tools() {
    if ! _exists asdf; then
      error "ASDF not installed"
      return 1
    fi
    
    if [[ ! -f ~/.tool-versions ]]; then
      error "~/.tool-versions not found"
      return 1
    fi
    
    while read -r line; do
      # get the first word of the line
      tool_name="${line%% *}"
      running "$tool_name"
      
      # is language already installed?
      if ! asdf where $tool_name > /dev/null 2>&1; then
        # does the plugin exist in the remote repos?
        if asdf plugin list all | grep -E "^$tool_name\s" > /dev/null 2>&1; then
          # is the plugin not installed already?
          if ! asdf plugin list | grep "$tool_name" > /dev/null 2>&1; then
            action "asdf plugin-add $tool_name"
            asdf plugin-add $tool_name
          fi
          action "Installing $tool_name"
          asdf install $tool_name || error "Couldn't install $tool_name"
        else
          error "Plugin $tool_name does not exist"
        fi
      else
        ok "$tool_name already installed"
      fi
    done < ~/.tool-versions
    
    return 0
  }
}

# Shell setup module
shell_module() {
  # Configure Fish shell
  setup_fish() {
    if ! _exists fish; then
      error "Fish shell not installed"
      return 1
    fi
    
    # Add fish to /etc/shells if not already there
    {{- if eq .osid "darwin" -}}
    local fish_path=$(which fish)
    if ! grep -q "$fish_path" /etc/shells; then
      action "Adding Fish to /etc/shells"
      echo "$fish_path" | sudo tee -a /etc/shells
    fi
    {{- end -}}
    
    return 0
  }
  
  # Setup Starship prompt
  setup_starship() {
    if ! _exists starship; then
      error "Starship not installed"
      return 1
    fi
    
    # Ensure config directory exists
    mkdir -p ~/.config
    
    # Create default configuration if it doesn't exist
    if [[ ! -f ~/.config/starship.toml ]]; then
      action "Creating Starship configuration"
      # Either copy from template or generate minimal config
      starship preset minimal > ~/.config/starship.toml || {
        error "Failed to create Starship configuration"
        return 1
      }
    fi
    
    ok "Starship configured"
    return 0
  }
}

# Dev tools module
devtools_module() {
  # Setup VSCode
  setup_vscode() {
    bot "Checking VSCode..."
    echo
    {{ if eq .osid "darwin" -}}
    warn "VSCode setup not supported on macOS."
    return 0
    {{ end -}}
    if ! _exists code ; then
      if prompt "Would you like to install vscode?" ;then
        action "checking if snapd is enabled"
        if systemctl is-active --quiet snapd ;then
          action "snap install code --classic"
          sudo snap install code --classic
          ok
        else
          warn "Please install and enable snapd for VSCode"
        fi
      else
        ok "Skipping"
      fi
    else
      ok "VSCode already installed"
    fi
  }
  
  # Setup Fonts
  setup_fonts() {
    action "Setting up fonts"
    
    {{ if eq .osid "darwin" -}}
    # Font installation for macOS handled via Homebrew casks
    ok "Fonts installed via Homebrew"
    {{ else -}}
    bot "Fira Code setup."
    if ! fc-list | grep -qi "Fira Code" > /dev/null 2>&1; then
      if prompt "Would you like to install Fira Code NerdFont to get cool icons on the terminal?"; then
        action "Downloading from https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/FiraCode.zip"
        wget -q https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/FiraCode.zip && \
        if [ -f "FiraCode.zip" ]; then
          action "Unzipping and adding to ~/.fonts..."
          unzip -q FiraCode.zip -d ~/.fonts && \
          fc-cache -f > /dev/null
          action "Cleaning up..."
          rm -f FiraCode.zip
        else
          error "Download failed. FiraCode.zip not found."
          return 1
        fi
      else
        ok "Skipping"
      fi
    else
      ok "Fira Code already installed!"
    fi
    {{ end -}}
    
    return 0
  }
}

# Docker module
docker_module() {
  setup_docker() {
    {{ if ne .osid "darwin" -}}
    install_docker
    configure_docker
    {{ end -}}
    return 0
  }
  
  install_docker() {
    bot "Checking Docker"
    echo
    if ! _exists docker ; then
      if prompt "Would you like to install Docker?"; then
        action "Adding Docker official GPG key"
        sudo apt-get -qq install -y ca-certificates curl > /dev/null
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        action "Adding Docker repository to apt sources"
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/$(. /etc/os-release && echo "$ID") \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        action "Updating apt packages with the new Docker repository"
        sudo apt-get -qq update > /dev/null
        action "Installing Docker"
        sudo apt-get -qq install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin > /dev/null
      else
        ok "Skipping"
      fi
    else
      ok "Docker already installed"
    fi
  }
  # Setup Docker
  configure_docker() {
    if ! _exists docker; then
      error "Docker not installed"
      return 1
    fi

    action "Ensuring Docker is running"
    # Check which service manager is available
    if command -v systemctl &>/dev/null; then
      sudo systemctl enable --now docker
    elif command -v service &>/dev/null; then
      sudo service docker start
    else
      warn "Could not determine how to start Docker service"
    fi

    # Add user to docker group
    if ! groups | grep -q docker; then
      action "Adding user to docker group"
      sudo usermod -aG docker "$USER"
      warn "You may need to log out and back in for this to take effect"
    fi

    ok "Docker configured"
    return 0
  }
}

# Local setup module
local_module() {
  local_setup() {
    # Run local setup tasks
    setup_ssh_keys
    setup_passwordless_sudo
    set_fish_as_default_shell
    return 0
  }
  # Setup SSH keys
  setup_ssh_keys() {
    if [[ ! -f ~/.ssh/id_ed25519 ]]; then
      if prompt "Generate new SSH key?"; then
        action "Generating SSH key"
        # Prompt for passphrase instead of using empty one
        ssh-keygen -t ed25519 -C "{{ .email }}" -f ~/.ssh/id_ed25519
        # Start ssh-agent
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519
        ok "SSH key generated"
      fi
    else
      ok "SSH key already exists"
    fi
    return 0
  }

  setup_passwordless_sudo() {
    if [[ ! "$LOGNAME" =~ ^[a-zA-Z0-9][a-zA-Z0-9_-]*$ ]]; then
      echo "Error: LOGNAME contains invalid characters."
      return 1
    fi
    bot "Verifying passwordless sudo config"
    # Determine sudoers.d directory based on OS
    local sudoers_d_dir="/etc/sudoers.d"
    local includedir_line="@includedir /etc/sudoers.d"
    {{ if eq .osid "darwin" -}}
    sudoers_d_dir="/private/etc/sudoers.d"
    includedir_line="#includedir /private/etc/sudoers.d"
    {{ end -}}

    # Check if NOPASSWD entry already exists for the user
    if ! sudo grep -q "NOPASSWD:     ALL" "$sudoers_d_dir/$LOGNAME" > /dev/null 2>&1; then
      echo "No sudoer file found for passwordless operation."
      bot "Enabling passwordless sudo can reduce security. Are you sure you want to proceed?"

      if prompt "Make sudo passwordless?"; then
        # Ensure sudoers.d is included and directory exists
        if ! sudo grep -q "$includedir_line" /etc/sudoers; then
          echo "$includedir_line" | sudo tee -a /etc/sudoers > /dev/null
        fi
        [[ ! -d "$sudoers_d_dir" ]] && sudo mkdir -p "$sudoers_d_dir"

        # Create a temporary file with secure permissions
        local tmpfile=$(sudo mktemp)
        echo -e "Defaults:$LOGNAME !requiretty\n$LOGNAME ALL=(ALL) NOPASSWD: ALL" | sudo tee "$tmpfile" > /dev/null
        # Validate and move if valid
        if sudo visudo -cf "$tmpfile"; then
          sudo install -m 0440 "$tmpfile" "$sudoers_d_dir/$LOGNAME"
          sudo rm -f "$tmpfile"
          echo "You can now run sudo commands without a password!"
        else
          echo "Error in sudoers file"
          sudo rm -f "$tmpfile"
          return 1
        fi
      fi
    else
      echo "Passwordless sudo already configured for $LOGNAME."
    fi
  }

  set_fish_as_default_shell() {
    if prompt "Set Fish as default shell?"; then
      chsh -s "$(which fish)" || error "Failed to set Fish as default shell"
    fi
  }
}
